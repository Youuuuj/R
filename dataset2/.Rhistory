#카이 제곱 검정으로 변수들의 중요성 평가
cs <- chi.squared(Class ~., data=Vehicle)
#변수 중에서 중요한 5개 선별
cutoff.k(cs,5)
library(dplyr)
library(caret)
my_data <- data.frame(economics)
# make the Y variable "pop" into a leading variable so I am predicting the future value
new_data <- cbind(my_data, lead(my_data$pop, n = 1))
# renaming the leading pop into Y and the other pop into pop_lag
names(new_data)[7] <- "Y"
names(new_data)[3] <- "pop_lag"
# date into rownames
new_data <- rownames_date(new_data)
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
new_data <- na.omit(new_data)
# take the logdiff of all the time series
new_data  <- logdiff_func(new_data)
new_data <- na.omit(new_data)
# create training and testing sets
trainIndex <- 1:round((0.7*nrow(new_data)),1)
new_train <- new_data[ trainIndex,]
new_test  <- new_data[-trainIndex,]
# train a randomforest model on the training data
rf_model <- train(Y ~ ., data = new_train, method = 'rf',
trControl = trainControl(method = 'timeslice',
initialWindow = 50,
horizon = 15,
fixedWindow = TRUE),
importance = TRUE,
tuneGrid = data.frame(mtry = 1:(ncol(new_data)-1)))
# make predictions on testing data
rf.fit <- predict(rf_model, new_test)
rownames(new_data)
plot(ecp_test$datepls_pre, type = 'l')
plot(ecp_test$date, pls_pre, type = 'l')
plot(ecp_test$date, pls_pre, type = 'l')
df <- data.frame(economics)
trainIndex <- 1:round((0.7*nrow(new_df)),1)
eco_train <- df[trainIndex,]
eco_test <- df[-trainIndex,]
myTimeControl <- trainControl(method = "timeslice",
initialWindow = 36,
horizon = 12,
fixedWindow = TRUE)
plsFitTime <- train(unemploy ~ pce + pop + psavert,
data = eco_train,
method = "pls",
preProc = c("center", "scale"),
trControl = myTimeControl)
plsFitTime
pls_pre <- predict(plsFitTime,eco_test)
plot(ecp_test$date, pls_pre, type = 'l')
plsFitTime
pls_pre <- predict(plsFitTime,eco_test)
plot(ecp_test$date, pls_pre, type = 'l')
plot(eco_test$date, pls_pre, type = 'l')
plot(eco_test$date,eco_test$unemploy, type = 'l')
plot(eco_test$date, pls_pre, type = 'l')
plot(eco_test$date,eco_test$uempmed, type = 'l')
plot(eco_test$date, pls_pre, type = 'l')
plot(eco_test$date,eco_test$uempmed, type = 'l')
plot(eco_test$date,eco_test$, type = 'l')
length(eco_test$unemploy)
plot(eco_test$date,eco_test$unemploy, type = 'l')
plot(eco_test$date, pls_pre, type = 'l')
plot(eco_test$date,eco_test$unemploy, type = 'l')
par(mfrow = c(1,2))
length(eco_test$unemploy)
plot(eco_test$date,eco_test$unemploy, type = 'l')
plot(eco_test$date, pls_pre, type = 'l')
eco_test
diff(log(economics))
df <- data.frame(economics)
str(df)
diff(log(df[-1])]))
diff(log(df[-1]))
df[-1]
log(df[-1])
diff(log(df[-1]))
diff(log(df[-1]))
diff(log(df[-1]))
diff(log(df[-1]))
diff(log(df[-1]))
diff(log(df[-1]))
diff(log(df[-1]))
log(df[-1])
diff(log(df[2:^]))
diff(log(df[2:6]))
setwd('C:/Users/You/Desktop/빅데이터/빅데이터 수업자료/R/dataset2')
kospi <- read.csv('kospi.csv', header = T)
str(kospi)
View(kospi)
# 1-2단계 : 시간순으로 정렬
kospi <- kospi[order(kospi$일자),]
kospi
# 1-3단계 : 시계열 객체생성
kospi_ts <- ts(kospi$종가, start=c(2011,229), frequency = 240)  # 시계열 데이터로 변환
str(kospi_ts)
print(kospi_ts)
str(kospi_ts)
# 1-3단계 : 시계열 객체생성
kospi_ts <- ts(kospi$종가, start=c(2011,229), frequency = 240)  # 시계열 데이터로 변환
str(kospi_ts)
print(kospi_ts)
diff(log(df[2:6]))
my_data <- data.frame(economics)
# make the Y variable "pop" into a leading variable so I am predicting the future value
new_data <- cbind(my_data, lead(my_data$pop, n = 1))
# renaming the leading pop into Y and the other pop into pop_lag
names(new_data)[7] <- "Y"
names(new_data)[3] <- "pop_lag"
# date into rownames
new_data <- rownames_date(new_data)
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
new_data <- na.omit(new_data)
# take the logdiff of all the time series
new_data  <- logdiff_func(new_data)
new_data <- na.omit(new_data)
do_lag <- function(data, variables, num_periods = 1){
num_vars <- length(variables)
num_rows <- nrow(data)
for(j in 1:num_vars){
for(i in 1:num_periods){
data[[paste0(variables[j], "_lag")]] <- c(rep(NA, i), head(data[[variables[j]]], num_rows - i))
}
}
return(data)
}
MSE <- function(testY, fit) {
error <- testY - fit
return(sum(error**2) / length(error))
}
rownames_date <- function(data){
for(i in 1:ncol(data)){
if(names(data)[i] == "Date" || names(data)[i] == "date"){
rownames(data) <- data[,i]
data[,i] <- NULL
return(data)
}
}
}
logdiff_func <- function(data){
data <- na.omit(data)
i <- 1
for(i in 1:length(data)){
data[, i][1:(nrow(data))] <- log(data[, i])
}
i <- 1
for(i in 1:length(data)){
data[, i][1:(nrow(data)-1)] <- diff(data[, i])
}
data[nrow(data),] <- NA
return(data)
}
my_data <- data.frame(economics)
# make the Y variable "pop" into a leading variable so I am predicting the future value
new_data <- cbind(my_data, lead(my_data$pop, n = 1))
# renaming the leading pop into Y and the other pop into pop_lag
names(new_data)[7] <- "Y"
names(new_data)[3] <- "pop_lag"
# date into rownames
new_data <- rownames_date(new_data)
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
new_data <- na.omit(new_data)
# take the logdiff of all the time series
new_data  <- logdiff_func(new_data)
new_data <- na.omit(new_data)
# create training and testing sets
trainIndex <- 1:round((0.7*nrow(new_data)),1)
new_test  <- new_data[-trainIndex,]
new_train <- new_data[ trainIndex,]
new_test  <- new_data[-trainIndex,]
my_data <- data.frame(economics)
# make the Y variable "pop" into a leading variable so I am predicting the future value
new_data <- cbind(my_data, lead(my_data$pop, n = 1))
# renaming the leading pop into Y and the other pop into pop_lag
names(new_data)[7] <- "Y"
# make the Y variable "pop" into a leading variable so I am predicting the future value
new_data <- cbind(my_data, lead(my_data$pop, n = 1))
my_data <- data.frame(economics)
# date into rownames
new_data <- rownames_date(new_data)
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
new_data <- na.omit(new_data)
# take the logdiff of all the time series
new_data  <- logdiff_func(new_data)
new_data <- na.omit(new_data)
# create training and testing sets
trainIndex <- 1:round((0.7*nrow(new_data)),1)
new_train <- new_data[ trainIndex,]
new_test  <- new_data[-trainIndex,]
my_data
# train a randomforest model on the training data
rf_model <- train(unemploy ~ ., data = new_train, method = 'rf',
trControl = trainControl(method = 'timeslice',
initialWindow = 50,
horizon = 15,
fixedWindow = TRUE),
importance = TRUE,
tuneGrid = data.frame(mtry = 1:(ncol(new_data)-1)))
new_test$pce_lag
# make predictions on testing data
rf.fit <- predict(rf_model, new_test)
table(rf.fit, new_test$pce_lag)
table(rf.fit, new_test$unemploy_lag)
table(rf.fit, new_test$)
# plotting results
tick.dates <- c('1970-01-01', '1980-01-01', '1990-01-01', '2000-01-01', '2010-01-01')
table(rf.fit, new_test$unemploy)
plot(rf.fit)
# plotting results
tick.dates <- c('1970-01-01', '1980-01-01', '1990-01-01', '2000-01-01', '2010-01-01')
rf.pred <- data.frame(Month = rownames(new_data), actual = new_data$Y,
predicted = c(rep(NA, dim(new_data)[1] - length(rf.fit)),
rf.fit))
ggplot(rf.pred, aes(x = Month, y = actual)) + geom_point(alpha = .7) +
geom_point(aes(y = predicted), color = 'red', alpha = .7, shape = 3) +
scale_x_discrete(breaks = tick.dates) +
labs(title = 'Time-sliced random forest actual (black) and predicted (red)',
x = 'Month', y = 'logdiff Unemployment')
# renaming the leading pop into Y and the other pop into pop_lag
names(new_data)[7] <- "Y"
names(new_data)[3] <- "pop_lag"
# date into rownames
new_data <- rownames_date(new_data)
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
new_data <- na.omit(new_data)
# take the logdiff of all the time series
new_data  <- logdiff_func(new_data)
new_data <- na.omit(new_data)
# create training and testing sets
trainIndex <- 1:round((0.7*nrow(new_data)),1)
new_train <- new_data[ trainIndex,]
new_test  <- new_data[-trainIndex,]
new_test
# train a randomforest model on the training data
rf_model <- train(unemploy ~ ., data = new_train, method = 'rf',
trControl = trainControl(method = 'timeslice',
initialWindow = 50,
horizon = 15,
fixedWindow = TRUE),
importance = TRUE,
tuneGrid = data.frame(mtry = 1:(ncol(new_data)-1)))
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
new_data <- na.omit(new_data)
# date into rownames
new_data <- rownames_date(new_data)
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
# renaming the leading pop into Y and the other pop into pop_lag
names(new_data)[7] <- "Y"
names(new_data)[3] <- "pop_lag"
library(dplyr)
library(caret)
my_data <- data.frame(economics)
# make the Y variable "pop" into a leading variable so I am predicting the future value
new_data <- cbind(my_data, lead(my_data$pop, n = 1))
# renaming the leading pop into Y and the other pop into pop_lag
names(new_data)[7] <- "Y"
names(new_data)[3] <- "pop_lag"
# date into rownames
new_data <- rownames_date(new_data)
# lagging variables to use as prediction variables.
new_data <- do_lag(new_data, names(new_data)[-c(2,6)])
new_data <- na.omit(new_data)
# take the logdiff of all the time series
new_data  <- logdiff_func(new_data)
new_data <- na.omit(new_data)
# create training and testing sets
trainIndex <- 1:round((0.7*nrow(new_data)),1)
new_train <- new_data[ trainIndex,]
new_test  <- new_data[-trainIndex,]
# train a randomforest model on the training data
rf_model <- train(unemploy ~ ., data = new_train, method = 'rf',
trControl = trainControl(method = 'timeslice',
initialWindow = 50,
horizon = 15,
fixedWindow = TRUE),
importance = TRUE,
tuneGrid = data.frame(mtry = 1:(ncol(new_data)-1)))
log_df <- log(df[2:6])
Date <- df$date
log_df <- cbind(Date, log_df)
diff(log_df)
log_df
data(economics)
df
diff(log((economics))
diff(log(economics))
diff(log(economics))
diff(log(economics))
log_df <- log(df[2:6])
log_df <- log(df[2:6])
diff(log(economics))
diff(log(economics))
diff(log(economics))
diff(log(economics))
diff(log(economics))
diff(log(economics))
library(caret)
library(ggplot2)
library(pls)
data(economics)
str(economics)
# 시계열분석 데이터 분할
timeSlices <- createTimeSlices(1:nrow(economics),
initialWindow = 36, horizon = 12, fixedWindow = TRUE)
str(timeSlices,max.level = 1)
# 훈련, 검증데이터 생성
trainSlices <- timeSlices[[1]]
testSlices <- timeSlices[[2]]
# 훈련모델 작성
myTimeControl <- trainControl(method = "timeslice",
initialWindow = 36,
horizon = 12,
fixedWindow = TRUE)
plsFitTime <- train(unemploy ~ pce + pop + psavert,
data = economics,
method = "pls",
preProc = c("center", "scale"),
trControl = myTimeControl)
plsFitTime
# 3단계 : 예측
pred <- predict(plsFitTime, economics)
pred
plot(economics$unemploy)
plot(pred)
plot(economics$unemploy)
plot(economics$unemploy, type = l)
plot(economics$unemploy, type = 'l')
plot(pred, type = 'l')
plot(economics$unemploy, type = 'l')
plsFitTime <- train(unemploy ~ .,
data = economics,
method = "pls",
preProc = c("center", "scale"),
trControl = myTimeControl)
plsFitTime
# 3단계 : 예측
pred <- predict(plsFitTime, economics)
plot(economics$unemploy, type = 'l')
plot(pred, type = 'l')
plot(economics$unemploy, type = 'l', color = 'red')
ggplot(economics$unemploy, aes(x = economics$date, y = unemploy))
ggplot(economics$unemploy, aes(x = economics$date, y = unemploy))
ggplot(economics$unemploy, aes(x = economics$date, y = unemploy)) +
geom_line(color = 'blue')
ggplot(economics$unemploy, aes(x = economics$date, y = economics$unemploy)) +
geom_line(color = 'blue')
ggplot(economics, aes(x = economics$date, y = economics$unemploy)) +
geom_line(color = 'blue') + geom
ggplot(economics, aes(x = economics$date, y = economics$unemploy)) +
geom_line(color = 'blue')
source("C:/Users/You/Desktop/hh.R", encoding = 'UTF-8', echo=TRUE)
ggplot(economics, aes(x = economics$date, y = economics$unemploy)) +
geom_line(color = 'blue') + geom_line(aes(x = econimics$date, y = pred), color = 'red')
economics
asdf <- cbind(pred, economics[1,4])
asdf
asdf <- cbind(pred, economics[1,6])
asdf
economics[1,6]
asdf <- cbind(pred, economics[:1,6])
economics[:1,6]
asdf <- cbind(pred, economics[1])
economics[1]
economics[,1]
economics[,1:5]
asdf <- cbind(pred, economics[,c(1,6)])
asdf
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(color = 'blue') + geom_line(aes(x = date, y = pred), color = 'red')
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(color = 'blue', colour = '실제값') + geom_line(aes(x = date, y = pred), color = 'red', colour = '예측값값') +
geom_theme
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(color = 'blue', colour = '실제값') + geom_line(aes(x = date, y = pred), color = 'red', colour = '예측값') +
asdf <- cbind(pred, economics[,c(1,6)])
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(colour = '실제값') + geom_line(aes(x = date, y = pred), colour = '예측값')
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(colour = '실제값') + geom_line(aes(x = date, y = pred), colour = '예측값') +
scale_colour_manual(name="Line Color",
values=c(실제값 = "red" , 예측값 = "blue"))
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(colour = '실제값') + geom_line(aes(x = date, y = pred), colour = '예측값') +
scale_colour_manual(name="Line Color",
values=c(실제값 = "red" , 예측값 = "blue"))
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(colour = 'line1') + geom_line(aes(x = date, y = pred), colour = 'line2') +
scale_colour_manual(name="Line Color",
values=c(line1 = "red" , line2 = "blue"))
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(colour = asdf$unemploy) + geom_line(aes(x = date, y = pred), colour = 'line2') +
scale_colour_manual(name="Line Color",
values=c(line1 = "red" , line2 = "blue"))
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(colour = asdf$unemploy) + geom_line(aes(x = date, y = pred), colour = asdf$pred)
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(aes(colour = 'real')) + geom_line(aes(x = date, y = pred, colour = 'predict')) +
scale_colour_manual(values = c(real = 'red', predict = 'blue'))
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(aes(colour = 'real')) + geom_line(aes(x = date, y = pred, colour = 'predict')) +
scale_colour_manual(name = '측정값', values = c(real = 'red', predict = 'blue'))
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(aes(colour = 'real')) + geom_line(aes(x = date, y = pred, colour = 'predict')) +
scale_colour_manual(name = '측정값', values = c(real = 'red', predict = 'blue')) +
labs(title="실업자 수", x ="Date", y = "Unemploy")
plsFitTime <- train(unemploy ~ .,
data = economics,
method = "rf",
preProc = c("center", "scale"),
trControl = myTimeControl)
plsFitTime
# 예측
pred <- predict(plsFitTime, economics)
# 그래프 표시
asdf <- cbind(pred, economics[,c(1,6)])
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(aes(colour = 'real')) + geom_line(aes(x = date, y = pred, colour = 'predict')) +
scale_colour_manual(name = '측정값', values = c(real = 'red', predict = 'blue')) +
labs(title="실업자 수", x ="Date", y = "Unemploy")
sn <- sample(1:nrow(economics), size = nrow(economics)*0.7)
economics[sn]
sn <- sample(1:nrow(economics), size = nrow(economics)*0.7)
economics[sn]
sn
economics
data.frame(economics)[sn]
data.frame(economics)
qq<- data.frame(economics)
sn <- sample(1:nrow(qq), size = nrow(qq)*0.7)
qq[sn]
qq[sn,]
qq[-sn,]
tr <- qq[sn,]
te <- qq[-sn,]
plsFitTime <- train(unemploy ~ .,
data = tr,
method = "rf",
preProc = c("center", "scale"),
trControl = myTimeControl)
# 예측
pred <- predict(plsFitTime, te)
# 그래프 표시
asdf <- cbind(pred, tr[,c(1,6)])
# 그래프 표시
asdf <- cbind(pred, te[,c(1,6)])
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(aes(colour = 'real')) + geom_line(aes(x = date, y = pred, colour = 'predict')) +
scale_colour_manual(name = '측정값', values = c(real = 'red', predict = 'blue')) +
labs(title="실업자 수", x ="Date", y = "Unemploy")
source("C:/Users/You/Desktop/hh.R", encoding = 'UTF-8', echo=TRUE)
library(randomForest)
plsFitTimeㅊf <- randomForest(unemploy~. ,
data=tr,
na.action = na.omit,
ntree=100,
proximity=T)
# 예측
pred <- predict(plsFitTime_rf, te)
randomForest(unemploy~. ,
data=tr,
na.action = na.omit,
ntree=100,
proximity=T)
randomForest(unemploy~. ,
data=tr,
na.action = na.omit,
ntree=100,
proximity=T)
randomForest(unemploy~. ,
data=tr,
na.action = na.omit,
ntree=100,
proximity=T)
randomForest(unemploy~. ,
data=tr,
na.action = na.omit,
ntree=100,
proximity=T)
randomForest(unemploy~. ,
data=tr,
na.action = na.omit,
ntree=100,
proximity=T)
# 내장패키지 랜포 훈련모델 작성
plsFitTime_rf <- randomForest(unemploy~. ,
data=tr,
na.action = na.omit,
ntree=100,
proximity=T)
# 예측
pred <- predict(plsFitTime_rf, te)
# 예측
pred2 <- predict(plsFitTime_rf, te)
qwer <- cbind(pred2, te[,c(1,6)])
ggplot(asdf, aes(x = date, y = unemploy)) +
geom_line(aes(colour = 'real')) + geom_line(aes(x = date, y = pred, colour = 'predict')) +
scale_colour_manual(name = '측정값', values = c(real = 'red', predict = 'blue')) +
labs(title="실업자 수", x ="Date", y = "Unemploy")
ggplot(qwer, aes(x = date, y = unemploy)) +
geom_line(aes(colour = 'real')) + geom_line(aes(x = date, y = pred, colour = 'predict')) +
scale_colour_manual(name = '측정값', values = c(real = 'red', predict = 'blue')) +
labs(title="실업자 수", x ="Date", y = "Unemploy")
